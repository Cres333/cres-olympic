@startuml weight-flow

start
:スコアボードなどを用意;
:初期値を設定;

partition 準備=ready {
  :ゲームの説明;
  :フィールドを生成;
  if (チーム戦) then (TRUE)
    :参加者選択;
  endif
  :IDを割り振る;
  :各場所にテレポート;
}

partition ゲーム処理=game {
  repeat
    :ラウンドを加算;
    :ラウンド表示 and Wait;
    partition プレイ処理=play {
      :人参棒を渡す;
      :開始の合図 / 3-2-1;
      :連打回数を計算 / 連打数リセット;
      :始めを表示;
      -> 10秒経過;
      :それまでを表示 / 人参棒回収;
    }

    partition 判定処理=check {
      if (連打回数チェック) then (ジャスト)
        :何もしない;
      elseif (超えた)
        :ライフを超えた数だけ減らす;
        :ライフが0以下なら0にする;
      else (超えていない)
        :ライフを0にする;
      endif
      :金床を配置;
      :金床を連打数に応じて持ち上げる;
      if (ライフ) then (ライフがない)
        :金床を落とす;
        :スペクテイターモードにする;
        :ライフのスコアボードから削除;
      endif
      :金床を破棄;
    }
  repeat while (ラウンド数が5未満 and 成功したプレイヤーがいる)
}

partition 共通処理=main {
  partition 得点計算処理=point {
    :全員をスペクテイターモードにする;
    :スコア計算;
    :各プレイヤーにスコア割当;
    :各チームにスコア割当;
  }

  partition メダル計算処理=medal {
    if (得点計算) then (最もスコア高いプレイヤー)
      :金メダルをプレイヤーに加算;
      :各チームにメダル数を加算;
      :メダル合計数を加算;
      :最も高い点数の人からスコアを消す;
    endif
    if (メダル合計数が2人以下) then (最もスコア高いプレイヤー)
      :銀メダルをプレイヤーに加算;
      :各チームにメダル数を加算;
      :メダル合計数を加算;
      :最も高い点数の人からスコアを消す;
    endif
    if (メダル合計数が2人以下) then (最もスコア高いプレイヤー)
      :銅メダルをプレイヤーに加算;
      :各チームにメダル数を加算;
      :メダル合計数を加算;
      :最も高い点数の人からスコアを消す;
    endif
    :メダル獲得結果を表示;
  }
}

:フィールド破棄;
:スコアボードなどを破棄;
stop

@enduml